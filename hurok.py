from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from api_token import TOKEN
from api_token import ADMIN_ID




bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –¢—É–≥–º–∞“≥–æ
menu_button = KeyboardButton(text="üìã –ú–µ–Ω—é")
cart_button = KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
order_button = KeyboardButton(text="üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
confirm_button = KeyboardButton(text="‚úÖ –¢–∞—Å–¥–∏“õ")

main_kb = ReplyKeyboardMarkup(
    keyboard=[[menu_button, cart_button], [order_button, confirm_button]],
    resize_keyboard=True
)

# –ú–∞—ä–ª—É–º–æ—Ç–∏ –º—É–≤–∞“õ“õ–∞—Ç”£
user_cart = {}
user_data = {}

# FSM
class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()

# Start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–°–∞–ª–æ–º! –ú–∞–Ω –±–æ—Ç–∏ —Ñ–∞—Ä–º–æ–∏—à–∏ —Ö”Ø—Ä–æ–∫ “≥–∞—Å—Ç–∞–º! üçî",
        reply_markup=main_kb
    )

# –ú–µ–Ω—é
@dp.message(lambda msg: msg.text == "üìã –ú–µ–Ω—é")
async def show_menu(message: Message):
    food_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçï –ü–∏—Ü—Ü–∞", callback_data="food_pizza")],
        [InlineKeyboardButton(text="üçî –ë—É—Ä–≥–µ—Ä", callback_data="food_burger")],
        [InlineKeyboardButton(text="ü•§ –ö–æ–ª–∞", callback_data="food_cola")]
    ])
    await message.answer("–ú–µ–Ω—é–∏ –º–æ:", reply_markup=food_kb)

# –ò–ª–æ–≤–∞ –±–∞ –∫–æ—Ä–∑–∏–Ω–∞
@dp.callback_query(lambda c: c.data.startswith("food_"))
async def add_to_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    item = callback.data.replace("food_", "")

    if user_id not in user_cart:
        user_cart[user_id] = []
    user_cart[user_id].append(item)

    await callback.answer(f"{item.capitalize()} –±–∞ –∫–æ—Ä–∑–∏–Ω–∞ –∏–ª–æ–≤–∞ —à—É–¥ ‚úÖ", show_alert=True)

# –ù–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ –∫–æ—Ä–∑–∏–Ω–∞
@dp.message(lambda msg: msg.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    user_id = message.from_user.id
    cart = user_cart.get(user_id, [])

    if not cart:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç ‚ùå")
    else:
        items = "\n".join(f"‚Äì {item.capitalize()}" for item in cart)
        await message.answer(f"üì¶ –§–∞—Ä–º–æ–∏—à“≥–æ–∏ —à—É–º–æ:\n{items}")

# –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Üí –Ω–æ–º
@dp.message(lambda msg: msg.text == "üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def ask_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not user_cart.get(user_id):
        await message.answer("–ê–≤–≤–∞–ª —Ö”Ø—Ä–æ–∫ –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥! üçï")
        return

    await message.answer("–õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º–∏ —Ö—É–¥—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:")
    await state.set_state(OrderState.waiting_for_name)

# –ù–æ–º ‚Üí –∞–¥—Ä–µ—Å
@dp.message(OrderState.waiting_for_name)
async def save_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id] = {"name": message.text}
    await message.answer("–ê–¥—Ä–µ—Å–∏ —Ö—É–¥—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:")
    await state.set_state(OrderState.waiting_for_address)

# –ê–¥—Ä–µ—Å ‚Üí –æ—Ö–∏—Ä–∏ FSM
@dp.message(OrderState.waiting_for_address)
async def save_address(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]["address"] = message.text
    await state.clear()
    await message.answer("‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–∏ —à—É–º–æ –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞ —à—É–¥. –ë–∞—Ä–æ–∏ —Ç–∞—Å–¥–∏“õ —Ç—É–≥–º–∞–∏ ‚úÖ –¢–∞—Å–¥–∏“õ —Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.")

# –ü–∞—ë–º–∏ “∑–∞–º—ä–±–∞—Å—Ç –±–æ —Ç—É–≥–º–∞–∏ —Ç–∞—Å–¥–∏“õ
@dp.message(lambda msg: msg.text == "‚úÖ –¢–∞—Å–¥–∏“õ")
async def confirm_order(message: Message):
    user_id = message.from_user.id
    name = user_data.get(user_id, {}).get("name", "–ù–æ–º–∞—ä–ª—É–º")
    address = user_data.get(user_id, {}).get("address", "–ù–æ–º–∞—ä–ª—É–º")
    cart = user_cart.get(user_id, [])

    if not cart:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç ‚ùå")
        return

    items = "\n".join(f"‚Äì {item.capitalize()}" for item in cart)

    await message.answer(
        f"üì¶ –§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ:\n"
        f"üë§ –ù–æ–º: {name}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üçΩÔ∏è –•”Ø—Ä–æ–∫“≥–æ:\n{items}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞—Å–¥–∏“õ", callback_data="confirm_order")]
        ])
    )

# Callback ‚Üí —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω –±–∞ –∞–¥–º–∏–Ω –≤–∞ –ø–æ–∫–∫—É–Ω”£
@dp.callback_query(lambda c: c.data == "confirm_order")
async def handle_confirmation(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = user_data.get(user_id, {}).get("name", "–ù–æ–º–∞—ä–ª—É–º")
    address = user_data.get(user_id, {}).get("address", "–ù–æ–º–∞—ä–ª—É–º")
    cart = user_cart.get(user_id, [])

    items = "\n".join(f"‚Äì {item.capitalize()}" for item in cart)

    # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω –±–∞ –∞–¥–º–∏–Ω
    await bot.send_message(
        ADMIN_ID,
        f"üì• –§–∞—Ä–º–æ–∏—à–∏ –Ω–∞–≤:\n"
        f"üë§ –ù–æ–º: {name}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üÜî Telegram ID: {user_id}\n"
        f"üçΩÔ∏è –•”Ø—Ä–æ–∫“≥–æ:\n{items}"
    )

    # –ü–æ–∫ –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç
    user_cart.pop(user_id, None)
    user_data.pop(user_id, None)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚úÖ –§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ –±–∞ –∞–¥–º–∏–Ω —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥. –¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞! üôè")
    await callback.answer()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
